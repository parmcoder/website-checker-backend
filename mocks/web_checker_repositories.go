// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/parmcoder/website-checker-backend/repositories (interfaces: WebCheckerRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebCheckerRepository is a mock of WebCheckerRepository interface.
type MockWebCheckerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWebCheckerRepositoryMockRecorder
}

// MockWebCheckerRepositoryMockRecorder is the mock recorder for MockWebCheckerRepository.
type MockWebCheckerRepositoryMockRecorder struct {
	mock *MockWebCheckerRepository
}

// NewMockWebCheckerRepository creates a new mock instance.
func NewMockWebCheckerRepository(ctrl *gomock.Controller) *MockWebCheckerRepository {
	mock := &MockWebCheckerRepository{ctrl: ctrl}
	mock.recorder = &MockWebCheckerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebCheckerRepository) EXPECT() *MockWebCheckerRepositoryMockRecorder {
	return m.recorder
}

// ParallelCheck mocks base method.
func (m *MockWebCheckerRepository) ParallelCheck(arg0 *[]string) ([]int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParallelCheck", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// ParallelCheck indicates an expected call of ParallelCheck.
func (mr *MockWebCheckerRepositoryMockRecorder) ParallelCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParallelCheck", reflect.TypeOf((*MockWebCheckerRepository)(nil).ParallelCheck), arg0)
}
