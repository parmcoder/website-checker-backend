// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/parmcoder/website-checker-backend/services (interfaces: CheckerService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckerService is a mock of CheckerService interface.
type MockCheckerService struct {
	ctrl     *gomock.Controller
	recorder *MockCheckerServiceMockRecorder
}

// MockCheckerServiceMockRecorder is the mock recorder for MockCheckerService.
type MockCheckerServiceMockRecorder struct {
	mock *MockCheckerService
}

// NewMockCheckerService creates a new mock instance.
func NewMockCheckerService(ctrl *gomock.Controller) *MockCheckerService {
	mock := &MockCheckerService{ctrl: ctrl}
	mock.recorder = &MockCheckerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckerService) EXPECT() *MockCheckerServiceMockRecorder {
	return m.recorder
}

// ExtractLinesFromCsv mocks base method.
func (m *MockCheckerService) ExtractLinesFromCsv(arg0 [][]string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractLinesFromCsv", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractLinesFromCsv indicates an expected call of ExtractLinesFromCsv.
func (mr *MockCheckerServiceMockRecorder) ExtractLinesFromCsv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractLinesFromCsv", reflect.TypeOf((*MockCheckerService)(nil).ExtractLinesFromCsv), arg0)
}

// PerformCheck mocks base method.
func (m *MockCheckerService) PerformCheck(arg0 *[]string) (int, int, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformCheck", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(time.Duration)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// PerformCheck indicates an expected call of PerformCheck.
func (mr *MockCheckerServiceMockRecorder) PerformCheck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformCheck", reflect.TypeOf((*MockCheckerService)(nil).PerformCheck), arg0)
}
